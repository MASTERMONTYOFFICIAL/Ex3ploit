import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
import time
import random
from datetime import datetime

# User Agents for rotation
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/114.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 Version/14.1.2 Safari/605.1.15",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 Mobile/15E148",
    "Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 Chrome/83.0.4103.106 Mobile Safari/537.36"
]

# Colors
GREEN = '\033[92m'
RED = '\033[91m'
RESET = '\033[0m'
PURPLE = '\033[1;35m'
BLUE = "\033[0;34m"

# Save reflected payloads
def save_result(filename, full_url, payload, status):
    with open(filename, 'a') as f:
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        f.write(f"[{timestamp}] {status} | {full_url} | Payload: {payload}\n")

# Load payloads
def load_wordlist(wordlist):
    try:
        with open(wordlist, 'r') as file:
            return file.read().splitlines()
    except FileNotFoundError:
        print("Error: Wordlist not found.")
        return []

# Test each payload
def check_url(url, payload, output_file):
    headers = {
        "User-Agent": random.choice(USER_AGENTS)
    }
    full_url = f"{url}{payload}"
    try:
        response = requests.get(full_url, headers=headers, timeout=5)
        if response.status_code == 200:
            if payload in response.text:
                print(f"{GREEN}[REFLECTED] Payload Injected: {full_url}\nTested Payload: {payload}{RESET}")
                save_result(output_file, full_url, payload, "REFLECTED")
            else:
                print(f"{PURPLE}[NOT REFLECTED] 200 OK but payload not in response: {full_url}{RESET}")
        elif response.status_code == 403:
            print(f"{RED}[FORBIDDEN] : {full_url}{RESET}")
        elif response.status_code in (301, 302):
            print(f"{BLUE}[REDIRECT] : {full_url}{RESET}")
        else:
            print(f"{BLUE}[STATUS {response.status_code}] : {full_url}{RESET}")
    except requests.exceptions.RequestException as e:
        print(f"{RED}[ERROR] {e} for URL: {full_url}{RESET}")

# Multithreaded injection
def inject(url, wordlist, max_threads, output_file):
    print(f"{len(wordlist)} payloads found!")
    print(f"Testing payloads with {max_threads} threads...\n")
    with ThreadPoolExecutor(max_workers=max_threads) as executor:
        futures = [executor.submit(check_url, url, word, output_file) for word in wordlist]
        for future in as_completed(futures):
            pass  # Printing is done inside check_url

# Main UI
def main():
    print('''
        ╔══════════════════════════════════════════════════════════════════════╗
        ║                                                                      ║
        ║  ███████╗██╗  ██╗██████╗ ██████╗ ██╗      ██████╗ ██╗████████╗       ║
        ║  ██╔════╝╚██╗██╔╝╚════██╗██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝       ║
        ║  █████╗   ╚███╔╝  █████╔╝██████╔╝██║     ██║   ██║██║   ██║          ║
        ║  ██╔══╝   ██╔██╗  ╚═══██╗██╔═══╝ ██║     ██║   ██║██║   ██║          ║
        ║  ███████╗██╔╝ ██╗██████╔╝██║     ███████╗╚██████╔╝██║   ██║          ║
        ║  ╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝          ║
        ║                                                                      ║
        ║      Developed By : Pr3fessorV3rus                                   ║
        ║      GitHub       : https://github.com/MASTERMONTYOFFICIAL           ║
        ╚══════════════════════════════════════════════════════════════════════╝
''')

    try:
        print("Tool Loaded Successfully.\n")
        time.sleep(1)
        url = input("Enter URL (e.g. https://example.com?id=): ").strip()
        if not url.startswith("http://") and not url.startswith("https://"):
            url = "https://" + url

        wordlist_file = input("Enter the path of the wordlist (e.g. xss.txt): ").strip()
        output_file = input("Enter the path to save output (e.g. output.txt): ").strip()
        if not output_file:
            output_file = "reflected_payloads.txt"

        wordlist = load_wordlist(wordlist_file)
        if not wordlist:
            print("No valid wordlist loaded. Exiting...")
            return

        try:
            max_threads = int(input("Enter number of threads to use (e.g. 10): ").strip())
            if max_threads < 1:
                raise ValueError
        except ValueError:
            print("Invalid thread count. Using default: 5")
            max_threads = 5

        start = time.perf_counter()
        inject(url, wordlist, max_threads, output_file)
        end = time.perf_counter()
        print(f"\nExploitation completed in {round(end - start, 2)} second(s).")
        print(f"Reflected payloads saved to: {output_file}")
    except KeyboardInterrupt:
        print("\nThanks for using the tool. Goodbye!")

if __name__ == "__main__":
    main()
